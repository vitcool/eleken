Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cleanupCompilationEnvironment = exports.prepareCompilationEnvironment = exports.noopReactDOMRender = exports.resetCSS = exports.getCSS = exports.CSS = undefined;

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _jsdom = require('jsdom');

var _object = require('object.values');

var _object2 = _interopRequireDefault(_object);

var _object3 = require('object.entries');

var _object4 = _interopRequireDefault(_object3);

var _globalCache = require('global-cache');

var _globalCache2 = _interopRequireDefault(_globalCache);

var _noImportant = require('aphrodite/no-important');

var _ = require('..');

var _2 = _interopRequireDefault(_);

var _constants = require('./constants');

var _getClassName = require('./getClassName');

var _getClassName2 = _interopRequireDefault(_getClassName);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

// eslint-disable-next-line import/no-mutable-exports
var CSS = '';

var ReactDOM = void 0;
var hasReactDOM = false;
try {
  // eslint-disable-next-line global-require
  ReactDOM = require('react-dom');
  hasReactDOM = true;
} catch (err) {} // eslint-disable-line no-empty

var oldWindow = void 0;
var oldDocument = void 0;
var oldReactDOMRender = void 0;
var oldCSSInterfaceCreate = void 0;

function resetCSS() {
  exports.CSS = CSS = '';
}

function getCSS(stylesObject) {
  var sharedState = _globalCache2['default'].get(_constants.GLOBAL_CACHE_KEY) || {};
  var _sharedState$namespac = sharedState.namespace,
      namespace = _sharedState$namespac === undefined ? '' : _sharedState$namespac,
      _sharedState$maxSpeci = sharedState.maxSpecificity,
      maxSpecificity = _sharedState$maxSpeci === undefined ? _constants.MAX_SPECIFICITY : _sharedState$maxSpeci;


  var stylesObjectWithSpecificity = Object.assign({}, stylesObject);
  (0, _object4['default'])(stylesObject).forEach(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        styleName = _ref2[0],
        styleDef = _ref2[1];

    var _loop = function _loop(i) {
      var repeatedSpecifier = Array.from({ length: i }, function () {
        return String(styleName) + '_' + String(i);
      }).join('.');
      stylesObjectWithSpecificity[repeatedSpecifier] = styleDef;
    };

    for (var i = 1; i <= maxSpecificity; i += 1) {
      _loop(i);
    }
  });

  var styleSheet = _noImportant.StyleSheet.create(stylesObjectWithSpecificity);
  (0, _object4['default'])(styleSheet).forEach(function (_ref3) {
    var _ref4 = _slicedToArray(_ref3, 2),
        styleName = _ref4[0],
        styleSheetObject = _ref4[1];

    // getClassName removes the aphrodite hash, creating a clean classname
    // eslint-disable-next-line no-underscore-dangle, no-param-reassign
    styleSheetObject._name = (0, _getClassName2['default'])(namespace, styleName);
  });

  var _StyleSheetServer$ren = _noImportant.StyleSheetServer.renderStatic(function () {
    (0, _object2['default'])(styleSheet).forEach(function (style) {
      (0, _noImportant.css)(style);
    });
  }),
      CSSInfo = _StyleSheetServer$ren.css;

  var newCSS = CSSInfo.content;

  // Prepend newCSS so the entry point styles appear at the top of the stylesheet

  exports.CSS = CSS = newCSS + CSS;
}

function noopReactDOMRender() {}

function prepareCompilationEnvironment() {
  var _ref5 = new _jsdom.JSDOM(),
      jsdomWindow = _ref5.window;

  var jsdomDocument = jsdomWindow.document;


  oldWindow = global.window;
  global.window = jsdomWindow;
  oldDocument = global.document;
  global.document = jsdomDocument;

  if (hasReactDOM) {
    oldReactDOMRender = ReactDOM.render;
    ReactDOM.render = noopReactDOMRender;
  }

  oldCSSInterfaceCreate = _2['default'].create;
  _2['default'].create = getCSS;
}

function cleanupCompilationEnvironment() {
  global.window = oldWindow;
  global.document = oldDocument;
  if (hasReactDOM) ReactDOM.render = oldReactDOMRender;
  _2['default'].create = oldCSSInterfaceCreate;
}

exports.CSS = CSS;
exports.getCSS = getCSS;
exports.resetCSS = resetCSS;
exports.noopReactDOMRender = noopReactDOMRender;
exports.prepareCompilationEnvironment = prepareCompilationEnvironment;
exports.cleanupCompilationEnvironment = cleanupCompilationEnvironment;